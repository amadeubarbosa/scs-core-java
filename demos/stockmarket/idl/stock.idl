// StockMarket.idl
// O módulo StockMarket consiste das definições
// úteis para desenvolvimento de aplicações
// que lidam com mercado de ações.
module StockMarket {
  // O tipo StockSymbol é usado para representar os símbolos
  // das ações.
  typedef string StockSymbol;
  
  // Um StockSymbolList é uma sequência de StockSymbols.
  typedef sequence<StockSymbol> StockSymbolList;
  
  // A interface StockServer é a interface que fornece
  // as informações sobre ações.
  interface StockServer {
    // getStockValue() retorna o valor de uma
    // determinada ação, definida por um
    // StockSymbol fornecido como parâmetro de entrada.
    // Se o StockSymbol dado for desconhecido, o resultado
    // é indefinido. Depois veremos como usar uma exceção
    // para sinalizar essa condição.
    float getStockValue(in StockSymbol symbol);
  
    // getStockSymbols() retorna uma sequência com todos os
    // StockSymbols conhecidos.
    StockSymbolList getStockSymbols();
  };

  // A interface StockExchange é a interface que permite a compra 
  // de ações.
  interface StockExchange {
    // buyStock() diminui a quantidade de ações 
    // disponíveis. Se o StockSymbol for conhecido, o 
    // número de ações é diminuído de 1, todos os
    // interessados são avisados e true é retornado.
    // Se o StockSymbol dado for desconhecido ou sua 
    // quantidade for zero, é retornado false.
    boolean buyStock(in StockSymbol symbol);
  };

  // A interface ExchangePrinter é a interface que representa uma 
  // impressora de negociações de ações.
  interface ExchangePrinter {
    // print() imprime que houve uma negociação da ação indicada.
    // A saída utilizada para impressão não é especificada.
    // Exemplos de saídas: tela, arquivo, clientes remotos.
    void print(in StockSymbol symbol);
  };
};
