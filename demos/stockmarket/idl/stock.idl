// StockMarket.idl

module StockMarket {
  // The StockSymbol type is used to represent stock symbols.
  typedef string StockSymbol;
  
  // A StockSymbolList is a sequence of StockSymbols.
  typedef sequence<StockSymbol> StockSymbolList;
  
  // The StockServer interface provides information on available stocks.
  interface StockServer {
    // getStockValue() returns the value of a specific stock, defined by a
    // StockSymbol parameter. If the StockSymbol is unknown, the result is
    // undefined. (an exception is not used here for the sake of simplicity)
    float getStockValue(in StockSymbol symbol);
  
    // getStockSymbols() returns a sequence with all known StockSymbols.
    StockSymbolList getStockSymbols();
  };

  // The StockExchange interface allows the exchange of stocks.
  interface StockExchange {
    // buyStock() subtracts the quantity of available stocks. If the
    // StockSymbol is known, the stock quantity will be subtracted by one, all
    // listeners will be informed and true returned. If not or if quantity is
    // zero, false is returned.
    boolean buyStock(in StockSymbol symbol);
  };

  // The ExchangePrinter interface represents a printer of stock exchanges.
  // This interface may act as a listener for buyStock events from the 
  // StockExchange interface.
  interface ExchangePrinter {
    // print() prints a message informing that a stock exchange took place.
    // The output is not specified. Examples include the standard output,
    // display, file and remote clients.
    void print(in StockSymbol symbol);
  };
};
